<?php

/**
 * @file
 * Contains commerce_product_moderation.module.
 */

use Drupal\commerce_product\Plugin\Action\PublishProduct;
use Drupal\commerce_product\Plugin\Action\UnpublishProduct;
use Drupal\commerce_product_moderation\EntityOperations;
use Drupal\commerce_product_moderation\EntityTypeInfo;
use Drupal\commerce_product_moderation\Plugin\Action\ModerationOptOutPublishProduct;
use Drupal\commerce_product_moderation\Plugin\Action\ModerationOptOutUnpublishProduct;
use Drupal\commerce_product_variation\Plugin\Menu\EditTab;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\workflows\Entity\Workflow;

/**
 * Implements hook_help().
 */
function commerce_product_moderation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the content_moderation module.
    case 'help.page.commerce_product_moderation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Commerce Product Moderation module provides moderation for products by applying workflows to content. For more information, see the <a href=":commerce_product_moderation">online documentation for the Commerce Product Moderation module</a>.', [':commerce_product_moderation' => 'https://www.drupal.org/documentation/modules/commerce_product_moderation']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring workflows') . '</dt>';
      $output .= '<dd>' . t('Enable the Workflow UI module to create, edit and delete product moderation workflows.') . '</p>';
      $output .= '<dt>' . t('Configure Product Moderation permissions') . '</dt>';
      $output .= '<dd>' . t('Each transition is exposed as a permission. If a user has the permission for a transition, then they can move that node from the start state to the end state') . '</p>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function commerce_product_moderation_local_tasks_alter(&$local_tasks) {
  $content_entity_type_ids = [
    'commerce_product',
    'commerce_product_variation',
  ];

  foreach ($content_entity_type_ids as $content_entity_type_id) {
    if (isset($local_tasks["entity.$content_entity_type_id.edit_form"])) {
      $local_tasks["entity.$content_entity_type_id.edit_form"]['class'] = EditTab::class;
      $local_tasks["entity.$content_entity_type_id.edit_form"]['entity_type_id'] = $content_entity_type_id;
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function commerce_product_moderation_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = Drupal::service('commerce_product_moderation.moderation_information');

  $entity_type = $entity->getEntityTypeId();

  $access_result = NULL;

  if ($entity_type === 'commerce_product') {
    /** @var \Drupal\commerce_product\Entity\ProductInterface $entity */
    if ($operation === 'view') {
      $access_result = (!$entity->isPublished())
        ? AccessResult::allowedIfHasPermission($account, 'view any unpublished commerce product')
        : AccessResult::neutral();

      $access_result->addCacheableDependency($entity);
    }
    elseif ($operation === 'update' && $moderation_info->isModeratedEntity($entity) && $entity->moderation_state) {
      /** @var \Drupal\content_moderation\StateTransitionValidationInterface $transition_validation */
      $transition_validation = \Drupal::service('commerce_product_moderation.state_transition_validation');

      $valid_transition_targets = $transition_validation->getValidTransitions($entity, $account);
      $access_result = $valid_transition_targets ? AccessResult::neutral() : AccessResult::forbidden();

      $access_result->addCacheableDependency($entity);
      $access_result->addCacheableDependency($account);
      $workflow = \Drupal::service('commerce_product_moderation.moderation_information')->getWorkflowForEntity($entity);
      $access_result->addCacheableDependency($workflow);
      foreach ($valid_transition_targets as $valid_transition_target) {
        $access_result->addCacheableDependency($valid_transition_target);
      }
    }
  }

  return $access_result;
}

/**
 * Implements hook_action_info_alter().
 */
function commerce_product_moderation_action_info_alter(&$definitions) {

  // The publish/unpublish actions are not valid on moderated entities. So swap
  // their implementations out for alternates that will become a no-op on a
  // moderated node. If another module has already swapped out those classes,
  // though, we'll be polite and do nothing.
  if (isset($definitions['commerce_publish_product_action']['class']) && $definitions['commerce_publish_product_action']['class'] == PublishProduct::class) {
    $definitions['commerce_publish_product_action']['class'] = ModerationOptOutPublishProduct::class;
  }
  if (isset($definitions['commerce_unpublish_product_action']['class']) && $definitions['node_unpublish_action']['class'] == UnpublishProduct::class) {
    $definitions['commerce_unpublish_product_action']['class'] = ModerationOptOutUnpublishProduct::class;
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function commerce_product_moderation_entity_bundle_info_alter(&$bundles) {
  /** @var \Drupal\workflows\WorkflowInterface $workflow */
  foreach (Workflow::loadMultipleByType('commerce_product_moderation') as $workflow) {
    /** @var \Drupal\commerce_product_moderation\Plugin\WorkflowType\ProductModeration $plugin */
    $plugin = $workflow->getTypePlugin();
    foreach ($plugin->getEntityTypes() as $entity_type_id) {
      foreach ($plugin->getBundlesForEntityType($entity_type_id) as $bundle_id) {
        if (isset($bundles[$entity_type_id][$bundle_id])) {
          $bundles[$entity_type_id][$bundle_id]['workflow'] = $workflow->id();
        }
      }
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_product_moderation_entity_base_field_info(EntityTypeInterface $entity_type) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->entityBaseFieldInfo($entity_type);
}

/**
 * Implements hook_entity_type_alter().
 */
function commerce_product_moderation_entity_type_alter(array &$entity_types) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->entityTypeAlter($entity_types);
}

/**
 * Implements hook_entity_operation().
 */
function commerce_product_moderation_entity_operation(EntityInterface $entity) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->entityOperation($entity);
}

/**
 * Implements hook_entity_presave().
 */
function commerce_product_moderation_entity_presave(EntityInterface $entity) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->entityPresave($entity);
}

/**
 * Implements hook_entity_insert().
 */
function commerce_product_moderation_entity_insert(EntityInterface $entity) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->entityInsert($entity);
}

/**
 * Implements hook_entity_update().
 */
function commerce_product_moderation_entity_update(EntityInterface $entity) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->entityUpdate($entity);
}

/**
 * Implements hook_form_alter().
 */
function commerce_product_moderation_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->formAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function commerce_product_moderation_entity_extra_field_info() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->entityExtraFieldInfo();
}

/**
 * Implements hook_entity_view().
 */
function commerce_product_moderation_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->entityView($build, $entity, $display, $view_mode);
}
